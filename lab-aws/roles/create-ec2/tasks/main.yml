---
# tasks file for create-ec2

- name: Create security group for grafana
  ec2_group:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    region: "{{ region }}"
    rules:
      - proto: tcp  
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9090
        to_port: 9090
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 9100
        to_port: 9100
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sec_group_firewall_grafana
  when: project_name  == "grafana"

- name: debug sec_group_firewall_grafana
  debug:
    msg: "{{ sec_group_firewall_grafana}}"





- name: Create security group for normal ec2
  ec2_group:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sec_group_firewall
  when: project_name  != "grafana"


- name: debug sec_group_firewall
  debug:
    msg: "{{ sec_group_firewall}}"



- name: Create an EC2 key
  ec2_key:
    name: "{{ project_name }}-{{ env }}-key"
    region: "{{ region }}"
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
  register: ec2_key


- name: Touch the key file
  file:
    path: "{{ source_path }}/key-gen/{{ project_name }}-{{ env }}-key.pem"
    state: touch
    mode: 0644
    owner: jenkins
    group: jenkins

- name: Save private key
  copy: content="{{ ec2_key.key.private_key }}" dest='{{ source_path }}/key-gen/{{ project_name }}-{{ env }}-key.pem' mode=0644
  when: ec2_key.changed


- name: Create an EC2 instance grafana
  ec2:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ project_name }}-{{ env }}-key"
    region: "{{ region }}"
    group_id: "{{ sec_group_firewall_grafana.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    wait: yes
    instance_tags:
        env: "{{ env }}"
        Name: "{{ project_name }}instance"
    count_tag:
        name: Demo
    exact_count: "{{ count }}"
    vpc_subnet_id: "{{ subnetid }}"
    assign_public_ip: yes
#  with_sequence: start=1 end="{{ count }}"
  register: ec2_grafana
  tags: run_install_ec2
  when: project_name  == "grafana"

- name: Create an EC2 instance 
  ec2:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ project_name }}-{{ env }}-key"
    region: "{{ region }}"
    group_id: "{{ sec_group_firewall.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    wait: yes
    instance_tags:
        env: "{{ env }}"
        Name: "{{ project_name }}instance"
    count_tag:
        name: Demo
    exact_count: "{{ count }}"
    vpc_subnet_id: "{{ subnetid }}"
    assign_public_ip: yes
#  with_sequence: start=1 end="{{ count }}"
  register: ec2
  tags: run_install_ec2
  when: project_name  != "grafana"



- name: Add the newly created EC2 grafana instance(s) to host group
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }} 
              insertbefore="[newec2]" 
              line="{{ item.public_ip }} {{hoststring}}"
              state=present
  with_items: "{{ec2_grafana.instances}}"
  when: project_name  == "grafana"


- name: Add the newly created EC2 instance(s) to host group
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }}
              insertafter="[newec2]"
              line="{{ item.public_ip }} {{hoststring}}"
              state=present
  with_items: "{{ec2.instances}}"
  when: project_name  != "grafana"


- wait_for: path={{ hostpath }} search_regex={{hoststring}}

- name: Wait for SSH to come up
  local_action: wait_for 
                host={{ item.public_ip }} 
                port=22 
                state=started
  with_items: "{{ec2.instances}}"
  when: project_name  != "grafana"

- name: Wait for SSH to come up grafana
  local_action: wait_for
                host={{ item.public_ip }}
                port=22
                state=started
  with_items: "{{ec2_grafana.instances}}"
  when: project_name  == "grafana"

#- name: Add IP to ec2_hosts group
#  add_host: hostname={{ item.public_ip }} groups=ec2_hosts
#  with_items: "{{ec2.instances}}"
  



